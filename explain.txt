Tax Calculator – Code Explanation
Objective
The goal of this Python program is to calculate income tax based on a given income using slab-wise taxation rules. It first applies an exemption and then calculates tax for different income ranges.

Code Breakdown
1. Function: calculate_tax(income)
This function calculates the tax payable based on the given income after applying a standard exemption of Rs 75,000.

Step-by-Step Calculation
Subtract Exemption – The taxable income is calculated as:
Taxable Income
=
Income
−
75
,
000
Taxable Income=Income−75,000
Check for Tax-Free Income – If taxable income is ≤ 12 lakh, no tax is charged.
Apply Slab-Wise Taxation
₹4,00,000 – ₹8,00,000 → 5%
₹8,00,000 – ₹12,00,000 → 10%
₹12,00,000 – ₹16,00,000 → 15%
₹16,00,000 – ₹20,00,000 → 20%
₹20,00,000 – ₹24,00,000 → 25%
Above ₹24,00,000 → 30%
Return Final Tax Amount
2. Function: main()
This function:

Takes user input for income.
Calls calculate_tax(income) to compute the tax.
Displays a detailed breakdown of income, taxable amount, and tax payable.
Also calculates the Effective Tax Rate, which is:
Effective Tax Rate
=
(
Tax Payable
Income
)
×
100
Effective Tax Rate=( 
Income
Tax Payable
​
 )×100
Code Execution
The script runs when executed directly (__name__ == "__main__").
The user enters their annual income, and the program returns:
Total Income
Taxable Income (after exemption)
Tax Payable
Effective Tax Rate (%)
Example Output
Input: ₹18,00,000
Output:

yaml
Copy
Edit
Income: Rs 18,00,000  
Standard Exemption: Rs 75,000  
Taxable Income: Rs 17,25,000  
Tax Payable: Rs 1,37,500  
Effective Tax Rate: 7.64%  
Why This Code is Effective?
✅ Uses slab-wise taxation, similar to real-world tax rules.
✅ Applies exemption before calculating tax.
✅ Displays a detailed breakdown for better understanding.
✅ Calculates effective tax rate to see the percentage of income taxed.

Would you like any graphs or visuals to include in your presentation? 🎯


#html 
Here’s a quick summary of what was improved and how:

1️⃣ Responsive Design
Used media queries to adjust layout for smaller screens.
Set the container to 90% width on mobile for better readability.
2️⃣ Smooth Animations
Added fade-in and slide-up effects when results appear (show-result class).
Used CSS transitions for a smoother experience.
3️⃣ Icons for Better Clarity
Added a rupee icon inside the income input field using FontAwesome.
4️⃣ Dark Mode Toggle 🌙
Added a button to switch between light & dark mode.
Used CSS classes to change background & text color dynamically.
Small Steps to Implement
✅ Step 1: Add meta viewport for responsiveness.
✅ Step 2: Use a container div for better layout.
✅ Step 3: Wrap input fields with an icon container.
✅ Step 4: Add CSS animations for smooth transitions.
✅ Step 5: Implement JavaScript functions for:

Dark mode toggle
Smooth result animation